-----Code ban đầu trong pdf (thư viện Qt)

#include <QString>
#include <QVector>
#include <QDebug>
#include <algorithm>

// Các bảng cần thiết cho DES
int initial_perm[64] = {58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
                        62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
                        57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
                        61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};

int final_perm[64] = {40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
                      38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
                      36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
                      34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};

int exp_d[48] = {32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23,
                 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1};

int per[32] = {16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10,
               2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25};

int keyp[56] = {57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
                59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
                31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
                29, 21, 13, 5, 28, 20, 12, 4};

int key_comp[48] = {14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,
                    26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40,
                    51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};

int shift_table[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// Hàm hoán vị
QString permute(QString k, int* arr, int n) {
    QString per = "";
    for (int i = 0; i < n; i++) {
        per += k[arr[i] - 1];
    }
    return per;
}

// Hàm dịch bit
QString shift_left(QString k, int shifts) {
    QString s = "";
    for (int i = 0; i < shifts; i++) {
        for (int j = 1; j < 28; j++) {
            s += k[j];
        }
        s += k[0];
        k = s;
        s = "";
    }
    return k;
}

// Hàm XOR
QString xor_(QString a, QString b) {
    QString ans = "";
    for (int i = 0; i < a.size(); i++) {
        ans += (a[i] == b[i]) ? "0" : "1";
    }
    return ans;
}

// Hàm chuyển từ hex sang binary
QString hex2bin(QString s) {
    QHash<QChar, QString> mp;
    mp['0'] = "0000"; mp['1'] = "0001"; mp['2'] = "0010"; mp['3'] = "0011";
    mp['4'] = "0100"; mp['5'] = "0101"; mp['6'] = "0110"; mp['7'] = "0111";
    mp['8'] = "1000"; mp['9'] = "1001"; mp['A'] = "1010"; mp['B'] = "1011";
    mp['C'] = "1100"; mp['D'] = "1101"; mp['E'] = "1110"; mp['F'] = "1111";
    
    QString bin = "";
    for (int i = 0; i < s.size(); i++) {
        bin += mp[s[i]];
    }
    return bin;
}

// Hàm chuyển từ binary sang hex
QString bin2hex(QString s) {
    QString hex = "";
    for (int i = 0; i < s.length(); i += 4) {
        QString chunk = s.mid(i, 4);
        if (chunk == "0000") hex += "0";
        else if (chunk == "0001") hex += "1";
        else if (chunk == "0010") hex += "2";
        else if (chunk == "0011") hex += "3";
        else if (chunk == "0100") hex += "4";
        else if (chunk == "0101") hex += "5";
        else if (chunk == "0110") hex += "6";
        else if (chunk == "0111") hex += "7";
        else if (chunk == "1000") hex += "8";
        else if (chunk == "1001") hex += "9";
        else if (chunk == "1010") hex += "A";
        else if (chunk == "1011") hex += "B";
        else if (chunk == "1100") hex += "C";
        else if (chunk == "1101") hex += "D";
        else if (chunk == "1110") hex += "E";
        else if (chunk == "1111") hex += "F";
    }
    return hex;
}

// Hàm mã hóa DES
QString encrypt(QString pt, QVector<QString> rkb) {
    pt = hex2bin(pt);
    pt = permute(pt, initial_perm, 64);

    QString left = pt.mid(0, 32);
    QString right = pt.mid(32, 32);

    for (int i = 0; i < 16; i++) {
        QString right_expanded = permute(right, exp_d, 48);
        QString x = xor_(rkb[i], right_expanded);
        // Xử lý S-Box (giả định đơn giản hóa ở đây, thực tế cần bảng S-Box đầy đủ)
        QString op = permute(x, per, 32); // Thay bằng logic S-Box thực tế
        x = xor_(op, left);
        left = x;
        if (i != 15) {
            std::swap(left, right);
        }
    }

    QString combine = left + right;
    QString cipher = permute(combine, final_perm, 64);
    return bin2hex(cipher);
}

// Hàm tạo khóa con
QVector<QString> generateSubKeys(QString key) {
    key = hex2bin(key);
    key = permute(key, keyp, 56);

    QString left = key.left(28);
    QString right = key.mid(28, 28);

    QVector<QString> rkb;
    for (int i = 0; i < 16; i++) {
        left = shift_left(left, shift_table[i]);
        right = shift_left(right, shift_table[i]);
        QString combine = left + right;
        QString roundKey = permute(combine, key_comp, 48);
        rkb.push_back(roundKey);
    }
    return rkb;
}

// Hàm giải mã DES
QString decrypt(QString ct, QVector<QString> rkb) {
    std::reverse(rkb.begin(), rkb.end());
    return encrypt(ct, rkb);
}

int main() {
    QString plaintext = "1234567890ABCDEF"; // 16 ký tự hex
    QString key = "133457799BBCDFF1";     // 16 ký tự hex

    QVector<QString> rkb = generateSubKeys(key);

    QString ciphertext = encrypt(plaintext, rkb);
    qDebug() << "Ciphertext:" << ciphertext;

    QString decrypted = decrypt(ciphertext, rkb);
    qDebug() << "Decrypted:" << decrypted;

    return 0;
}
------WebKitFormBoundaryBkZTPjpE2IU0W8sC--
